name: App Deploy to AWS

on:
  push:
    branches: [main]

env:
  MAIL_HOST: ${{ secrets.MAIL_HOST }}
  MAIL_PORT: ${{ secrets.MAIL_PORT }}
  MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  MAIL_PROTOCOL: ${{ secrets.MAIL_PROTOCOL }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_SSLMODE: ${{ secrets.POSTGRES_SSLMODE }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: GET SOURCE CODE
        uses: actions/checkout@v4

      - name: SETUP JAVA
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '23'

      - name: BUILD PROJECT
        run: mvn clean package -DskipTests

      - name: AUTHENTICATE TO DOCKER HUB
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{secrets.DOCKER_PASSWORD }}

      - name: BUILD DOCKER IMAGE
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/deploy_jira . --no-cache

      - name: PUSH IMAGE TO DOCKERHUB
        run: docker push ${{ secrets.DOCKER_USERNAME }}/deploy_jira

      - name: CREATE .env FILE
        run: |
          echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" > .env
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "MAIL_PROTOCOL=${{ secrets.MAIL_PROTOCOL }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_SSLMODE=${{ secrets.POSTGRES_SSLMODE }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env

      - name: ADD EC2 HOST TO KNOWN_HOSTS
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: SETUP SSH KEY FOR AWS
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2-ssh-key.pem
          chmod 400 ec2-ssh-key.pem

      - name: TRANSFER ENV FILE TO EC2
        run: |
          scp -i ec2-ssh-key.pem .env ${{ secrets.EC2_HOST_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}

      - name: CLEANUP SSH KEY
        run: rm -f ec2-ssh-key.pem

      - name: TRANSFER DOCKER COMMANDS SCRIPT TO EC2
        run: |
          scp -i ec2-ssh-key.pem /home/runner/work/java-api-test/java-api-test/docker_commands.sh ${{ secrets.EC2_HOST_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: PULL IMAGE FROM DOCKERHUB
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/deploy_jira:latest

      - name: REMOVE EXISTING CONTAINER IF ANY
        run: |
          chmod +x ${{ secrets.EC2_PATH }}/docker_commands.sh
          sudo ${{ secrets.EC2_PATH }}/docker_commands.sh

      - name: RUN DOCKER CONTAINER
        run: sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/deploy_jira --env-file ${{ secrets.EC2_ENVFILE_PATH }}}}